
plugins {
    id 'java-gradle-plugin'
    id "com.gradle.plugin-publish" version "0.12.0"
    id 'maven-publish'
    id 'signing'
    id 'eclipse'
    id 'com.github.spotbugs' version '5.0.13'
    id 'com.diffplug.spotless' version '5.3.0'
}

group   'com.formkiq.gradle'
version '1.3.2'

java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(11))
  }
}

repositories {
    jcenter()
}

dependencies {
	implementation group: 'org.apache.commons', name: 'commons-compress', version: '1.20'
	
    testImplementation 'junit:junit:4.13'
	testImplementation group: 'commons-io', name: 'commons-io', version: '2.8.0'
	testImplementation group: 'org.apache.commons', name: 'commons-exec', version: '1.3'
    testImplementation group: 'com.google.testing.compile', name: 'compile-testing', version: '0.18'
    testImplementation gradleTestKit()
}

spotbugs {
    effort      = 'max'
    reportLevel = 'medium'
    excludeFilter = file("$rootDir/config/gradle/spotbugs-exclude.xml")
}

spotbugsMain {
    reports {
        xml.enabled  = false
        html.enabled = true
    }
}

spotless { 
    java { 
      eclipse().configFile project.rootProject.file("spotless.eclipseformat.xml") 
	} 
}

	
gradlePlugin {
    // Define the plugin
    plugins {
        nativeImage {
            id = 'com.formkiq.gradle.graalvm-native-plugin'
            displayName = 'GraalVM native Gradle plugin'
            description = 'Support for building Java applications as GraalVM native images'
            implementationClass = 'com.formkiq.gradle.GraalvmNativePlugin'
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath + sourceSets.functionalTest.compileClasspath
}

check {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest, tasks.publishToMavenLocal)
}

test {
   failFast = true
}

publishing {
    publications {
        pluginMaven(MavenPublication) {
        }
    }
}

pluginBundle {
    website = 'https://github.com/formkiq/graalvm-native-plugin'
    vcsUrl  = 'https://github.com/formkiq/graalvm-native-plugin.git'
    tags    = [ 'graal', 'graalvm', 'native', 'image', 'java', 'lambda', 'aws', ]
}

check {
      dependsOn(tasks.publishToMavenLocal)
}

tasks {
  processResources {
              duplicatesStrategy = org.gradle.api.file.DuplicatesStrategy.INCLUDE
  }
}
