
plugins {
    id 'java-gradle-plugin'
    id "com.gradle.plugin-publish" version "1.3.1"
    id 'maven-publish'
    id 'signing'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'com.github.spotbugs' version '6.1.13'
    id 'com.diffplug.spotless' version '7.0.4'
}

group   'com.formkiq.gradle'
version '1.7.0'

spotless {
    java {
        googleJavaFormat()
    }
}

java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(17))
  }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.apache.commons:commons-compress:1.27.1")
    implementation("com.github.docker-java:docker-java:3.5.1")
    implementation("com.github.docker-java:docker-java-transport-httpclient5:3.5.1")

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version:'5.11.4'
	testImplementation group: 'commons-io', name: 'commons-io', version: '2.19.0'
	testImplementation group: 'org.apache.commons', name: 'commons-exec', version: '1.5.0'
    testImplementation group: 'com.google.testing.compile', name: 'compile-testing', version: '0.21.0'
    testImplementation gradleTestKit()
}

spotbugs {
    effort      = 'max'
    reportLevel = 'medium'
    excludeFilter = file("$rootDir/config/gradle/spotbugs-exclude.xml")
}

spotbugsMain {
    reports {
        html {
            required.set(true)
        }
    }
}

spotless { 
    java { 
      eclipse().configFile project.rootProject.file("spotless.eclipseformat.xml") 
	} 
}
	
gradlePlugin {
    // Define the plugin
    website.set("https://github.com/formkiq/graalvm-native-plugin")
    vcsUrl.set("https://github.com/formkiq/graalvm-native-plugin.git")
    plugins {
        nativeImage {
            id = 'com.formkiq.gradle.graalvm-native-plugin'
            displayName = 'GraalVM native Gradle plugin'
            description = 'Support for building Java applications as GraalVM native images'
            implementationClass = 'com.formkiq.gradle.GraalvmNativePlugin'
            tags.set([ 'graal', 'graalvm', 'native', 'image', 'java', 'lambda', 'aws', ])
        }
    }
}

check {
    // Run the functional tests as part of `check`
    dependsOn(tasks.publishToMavenLocal)
}

test {
    failFast = true
    useJUnitPlatform()
}

publishing {
    publications {
        pluginMaven(MavenPublication) {
        }
    }
}

check {
      dependsOn(tasks.publishToMavenLocal)
}

tasks {
  processResources {
      duplicatesStrategy = org.gradle.api.file.DuplicatesStrategy.INCLUDE
  }
}

compileJava.dependsOn(tasks.spotlessApply)
check.dependsOn(tasks.publishToMavenLocal)
